import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense
from tensorflow.keras import datasets

# load data
(train_images,train_label), (test_images,test_label) = datasets.mnist.load_data()
input_shape = 28,28
# normalization & preprocessing
train_images,test_images = train_images / 255.0 ,test_images / 255.0
class_name=['ONE',
            'TWO',
            'THREE',
            'FOUR',
            'FIVE',
            'SIX',
            'SEVEN',
            'EIGHT',
            'NINE']
print(train_images.shape)
print(test_images.shape)
print(train_label.shape)
print(test_label.shape)
# label vaules
print('label vaules range',np.min(train_label),'to',np.max(train_label))
# pixel vaules
print('label vaules range',np.min(train_images),'to',np.max(train_images))
plt.figure(figsize=(17,8))
# bulid model
model = Sequential([
    LSTM(100, input_shape=input_shape),
    Dense(10,activation='softmax')
])
model.summary()
# compile model
model.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])
# train model
history = model.fit(train_images,train_label,epochs=10,validation_data=(test_images,test_label))
# model evaluate
test_loc , test_acc = model.evaluate(test_images,test_label,verbose=2)
print('test accuracy', round(test_acc*100), '%')
# ploting
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.ylim([0.75,1])


